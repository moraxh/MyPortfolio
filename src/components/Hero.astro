---
  import Button from "./Button.astro"
---

<div class="flex flex-col items-center justify-center bg-transparent">
  <span id="heroTitle" class="text-center font-bold bg-gradient-to-b from-primary to-90% to-accent bg-clip-text text-transparent p-1">
    <h2 class="text-5xl">
      Hello there,
    </h2>
    <h1 class="text-6xl">
      Iâ€™m Jorge Mora
    </h1>
  </span>
  
  <div id="heroSecondary" class="animation-fade-in-up mt-2 text-3xl font-bold text-center text-balance shadow-textI">
    I'm a <span id="heroTyping"></span>
  </div>

  <Button class="animation-fade-in-up mt-4 ">
    Get my Resume
    <svg class="fill-current w-3" viewBox="0 0 19 20" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M9.49999 14.2453C9.34166 14.2453 9.19322 14.2208 9.05468 14.1717C8.91614 14.1226 8.78749 14.0383 8.66874 13.9187L4.39375 9.64375C4.15625 9.40625 4.04225 9.12916 4.05175 8.8125C4.06125 8.49583 4.17525 8.21875 4.39375 7.98125C4.63125 7.74375 4.91348 7.62025 5.24043 7.61075C5.56739 7.60125 5.84922 7.71485 6.08593 7.95156L8.31249 10.1781V1.6875C8.31249 1.35105 8.42649 1.06921 8.65449 0.842004C8.88249 0.614796 9.16433 0.500796 9.49999 0.500004C9.83566 0.499212 10.1179 0.613212 10.3467 0.842004C10.5755 1.0708 10.6891 1.35263 10.6875 1.6875V10.1781L12.9141 7.95156C13.1516 7.71406 13.4338 7.60006 13.7607 7.60956C14.0877 7.61906 14.3695 7.74296 14.6062 7.98125C14.8239 8.21875 14.9379 8.49583 14.9482 8.8125C14.9585 9.12916 14.8445 9.40625 14.6062 9.64375L10.3312 13.9187C10.2125 14.0375 10.0838 14.1218 9.9453 14.1717C9.80676 14.2216 9.65833 14.2461 9.49999 14.2453ZM2.375 19.5C1.72187 19.5 1.16296 19.2676 0.698249 18.8029C0.233541 18.3382 0.000791666 17.7789 0 17.125V14.75C0 14.4135 0.114 14.1317 0.342 13.9045C0.57 13.6773 0.851833 13.5633 1.1875 13.5625C1.52317 13.5617 1.80539 13.6757 2.03419 13.9045C2.26298 14.1333 2.37658 14.4151 2.375 14.75V17.125H16.625V14.75C16.625 14.4135 16.739 14.1317 16.967 13.9045C17.195 13.6773 17.4768 13.5633 17.8125 13.5625C18.1482 13.5617 18.4304 13.6757 18.6592 13.9045C18.888 14.1333 19.0016 14.4151 19 14.75V17.125C19 17.7781 18.7676 18.3374 18.3029 18.8029C17.8382 19.2684 17.2789 19.5008 16.625 19.5H2.375Z"/>
    </svg>
  </Button>
</div>

<style>
  #heroTitle {
    @apply relative;
    animation-name: animateHeroTitle;
    animation-duration: 1s;
    animation-timing-function: ease-in-out;
    animation-fill-mode: forwards;
  }

  #heroSecondary {
    @apply relative;
    text-shadow: 0 0 7px;
  }

  #heroTyping::after {
    content: "";
    position: absolute;
    width: 0;
    height: 99%;
    @apply bg-bg border-text;
    border-left: 2px solid;
    right: -8px;
    animation: cursor .8s infinite;
  }

  @keyframes cursor {
    0% { @apply border-transparent; }
    50% { @apply border-text; }
    100% { @apply border-transparent; }
  }

  @keyframes animateHeroTitle {
    0% { top: -200px; }
    100% { top: 0; }
  }
</style>

<script>
  const heroTyping = document.getElementById('heroTyping');

  if (heroTyping) {
    const heroTypingTexts = [
      'Data Scientist and AI Engineer',
      'Full Stack Developer',
      'Software Developer',
    ];

    heroTyping.textContent = heroTypingTexts[0];

    let currentTextIdx = 0;

    const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

    const deleteText = async (element: HTMLElement, delayMs: number) => {
      const textArray = Array.from(element.textContent || '');
      for (let i = textArray.length; i > 0; i--) {
        element.textContent = textArray.slice(0, i - 1).join('');
        await delay(delayMs);
      }
      element.textContent = ''; // Clear completely
    };

    const writeText = async (element: HTMLElement, text: string, delayMs: number) => {
      for (const char of text) {
        element.textContent += char;
        await delay(delayMs);
      }
    };

    const cycleTexts = async () => {
      while (true) {
        await deleteText(heroTyping, 50);
        currentTextIdx = (currentTextIdx + 1) % heroTypingTexts.length;
        await delay(200);
        await writeText(heroTyping, heroTypingTexts[currentTextIdx], 70);
        await delay(400);
      }
    };

    setTimeout(cycleTexts, 1700);
  }
</script>